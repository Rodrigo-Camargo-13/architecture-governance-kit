name: "Quality Gate"
description: "Executa linters, ADR-lint, fronteiras arquiteturais, SAST, SCA e score usando os assets internos do kit."
runs:
  using: "composite"
  steps:
    # Define uma variável de conveniência para acessar os assets do kit
    - name: Define KIT_ROOT
      shell: bash
      run: echo "KIT_ROOT=${{ github.action_path }}/../.." >> $GITHUB_ENV

    # ---------- Documentação ----------
    - name: Lint Markdown (markdownlint-cli)
      shell: bash
      run: |
        npx -y markdownlint-cli@0.41.0 "**/*.md" -c "$KIT_ROOT/tools/docs/.markdownlint.json" || true

    # ---------- ADR Lint ----------
    - name: ADR Lint (docs/adr ou architecture/adr)
      shell: bash
      run: |
        python "$KIT_ROOT/tools/adr/adr_lint.py"

    # ---------- Fronteiras arquiteturais JS/TS ----------
    - name: Dependency boundaries (dependency-cruiser)
      if: ${{ hashFiles('**/package.json') != '' }}
      shell: bash
      run: |
        npx -y dependency-cruiser@16.8.0 \
          -c "$KIT_ROOT/tools/arch/dependency-cruiser.config.cjs" \
          --include-only "^src" \
          --output-type err || true

    # ---------- .NET: build + NetArchTest ----------
    - name: .NET build + NetArchTest (regras de arquitetura)
      if: ${{ hashFiles('**/*.csproj') != '' }}
      shell: bash
      run: |
        dotnet build -c Release --nologo
        dotnet test "$KIT_ROOT/tools/arch/netarchtest.sample.csproj" \
          -c Release --nologo \
          --logger "trx;LogFileName=netarchtest.trx" || true

    # ---------- Segurança: Gitleaks ----------
    - name: Secrets scanning (gitleaks)
      uses: gitleaks/gitleaks-action@v2
      with:
        config-path: ${{ env.KIT_ROOT }}/tools/sec/.gitleaks.toml
        redact: "true"

    # ---------- Segurança: Semgrep (SAST) ----------
    - name: Semgrep SAST
      uses: returntocorp/semgrep-action@v1
      with:
        config: ${{ env.KIT_ROOT }}/tools/sec/semgrep.yml
        generateSarif: "1"
        sarifFile: "semgrep.sarif"

    - name: Upload Semgrep SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif

    # ---------- Segurança: Trivy (SCA/IaC) ----------
    - name: Trivy filesystem scan
      uses: aquasecurity/trivy-action@0.24.0
      with:
        scan-type: fs
        ignorefile: ${{ env.KIT_ROOT }}/tools/sec/trivy-ignore.txt
        format: sarif
        output: trivy.sarif
        severity: CRITICAL,HIGH

    - name: Upload Trivy SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy.sarif

    # ---------- Score agregado ----------
    - name: Quality Gate Score
      shell: bash
      run: |
        python "$KIT_ROOT/scripts/quality_gate_score.py"

    # ---------- Summary ----------
    - name: Summary
      if: always()
      shell: bash
      run: |
        echo "### Architecture Governance Kit - Quality Gate ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Markdownlint, ADR Lint, Dependency-Cruiser" >> $GITHUB_STEP_SUMMARY
        echo "- NetArchTest (.NET), Gitleaks, Semgrep, Trivy" >> $GITHUB_STEP_SUMMARY
        echo "- Score agregado impresso nos logs" >> $GITHUB_STEP_SUMMARY
